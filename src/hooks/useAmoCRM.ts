import { useState } from 'react';
import { Deal, AppNotification } from '@/components/dashboard/types';

export const useAmoCRM = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const checkPaymentDeadlines = (dealsData: Deal[]): AppNotification[] => {
    const newNotifications: AppNotification[] = [];
    
    dealsData.forEach(deal => {
      if (deal.status_name === '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞') {
        const loanTermField = deal.custom_fields?.find(f => 
          f.field_name === '–°—Ä–æ–∫ –∑–∞–π–º–∞' || f.field_code === 'LOAN_TERM'
        )?.values?.[0]?.value || '30';
        
        const loanTermDays = parseInt(String(loanTermField).replace(/\D/g, '')) || 30;
        
        const createdDate = new Date(deal.created_at.split(' ')[0].split('.').reverse().join('-'));
        const dueDate = new Date(createdDate);
        dueDate.setDate(dueDate.getDate() + loanTermDays);
        
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        dueDate.setHours(0, 0, 0, 0);
        
        const diffTime = dueDate.getTime() - today.getTime();
        const daysLeft = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (daysLeft <= 0) {
          newNotifications.push({
            id: `overdue-${deal.id}`,
            title: 'üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂!',
            message: `–ó–∞–π–º –Ω–∞ —Å—É–º–º—É ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`,
            date: new Date().toLocaleDateString('ru-RU'),
            read: false,
            type: 'warning'
          });
        } else if (daysLeft === 1) {
          newNotifications.push({
            id: `urgent-${deal.id}`,
            title: '‚ö†Ô∏è –°—Ä–æ—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –≤—ã–ø–ª–∞—Ç–∞',
            message: `–ó–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞–π–º–∞ –Ω–∞ —Å—É–º–º—É ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–≥–∞—Å–∏—Ç—å!`,
            date: new Date().toLocaleDateString('ru-RU'),
            read: false,
            type: 'warning'
          });
        } else if (daysLeft <= 3) {
          newNotifications.push({
            id: `soon-${deal.id}`,
            title: '‚è∞ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è',
            message: `–û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω—è –¥–æ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–π–º–∞ –Ω–∞ —Å—É–º–º—É ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.`,
            date: new Date().toLocaleDateString('ru-RU'),
            read: false,
            type: 'warning'
          });
        } else if (daysLeft <= 7) {
          newNotifications.push({
            id: `reminder-${deal.id}`,
            title: 'üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ',
            message: `–û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π –¥–æ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–π–º–∞ –Ω–∞ —Å—É–º–º—É ${deal.price.toLocaleString('ru-RU')} ‚ÇΩ.`,
            date: new Date().toLocaleDateString('ru-RU'),
            read: false,
            type: 'info'
          });
        }
      }
    });
    
    newNotifications.sort((a, b) => {
      const priorityOrder = { 'warning': 0, 'info': 1, 'success': 2 };
      return priorityOrder[a.type] - priorityOrder[b.type];
    });
    
    return newNotifications;
  };

  const mapLeadData = (lead: any): Deal => {
    const customFields = lead.custom_fields_values || [];
    const loanTermField = customFields.find((f: any) => 
      f.field_name === '–°—Ä–æ–∫ –∑–∞–π–º–∞' || f.field_code === 'LOAN_TERM'
    );
    const loanTerm = loanTermField?.values?.[0]?.value || '30';
    const termDays = parseInt(String(loanTerm).replace(/\D/g, '')) || 30;
    
    const dealData: any = {
      id: lead.id,
      name: lead.name || '–ó–∞—è–≤–∫–∞',
      status: lead.status_name,
      status_id: lead.status_id,
      status_name: lead.status_name || '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
      status_color: lead.status_color || '#cccccc',
      pipeline_id: lead.pipeline_id,
      pipeline_name: lead.pipeline_name || '–û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞',
      price: lead.price || 0,
      amount: lead.price || 0,
      term: termDays,
      created_at: lead.created_at ? new Date(lead.created_at * 1000).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      }) : new Date().toLocaleDateString('ru-RU'),
      updated_at: lead.updated_at ? new Date(lead.updated_at * 1000).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      }) : new Date().toLocaleDateString('ru-RU'),
      date: lead.created_at ? new Date(lead.created_at * 1000).toLocaleDateString('ru-RU') : new Date().toLocaleDateString('ru-RU'),
      description: lead.name || '–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–π–º',
      responsible_user_id: lead.responsible_user_id,
      custom_fields: customFields,
      custom_fields_values: customFields
    };
    
    if (lead.overdue_days !== undefined) {
      dealData.overdue_days = lead.overdue_days;
    }
    if (lead.penalty !== undefined) {
      dealData.penalty = lead.penalty;
    }
    
    return dealData;
  };

  const fetchAmoCRMData = async (phone: string) => {
    try {
      setLoading(true);
      setError('');
      
      const cleanPhone = phone.replace(/\D/g, '');
      
      const response = await fetch(
        `https://functions.poehali.dev/0c680166-1e97-4c5e-8c8f-5f2cd1c88850?phone=${cleanPhone}`
      );
      
      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch {
          setError('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
          return null;
        }
        
        console.error('API Error:', response.status, errorData);
        
        if (response.status === 500) {
          if (errorData.error?.includes('access token')) {
            setError('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM. –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç AMOCRM_REFRESH_TOKEN');
          } else if (errorData.error?.includes('credentials')) {
            setError('‚ö†Ô∏è AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã: AMOCRM_DOMAIN, AMOCRM_CLIENT_ID, AMOCRM_CLIENT_SECRET, AMOCRM_REFRESH_TOKEN');
          } else {
            setError(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          }
        } else if (response.status === 404) {
          setError('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AmoCRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        } else if (response.status === 401) {
          setError('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ AmoCRM');
        } else {
          setError(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        return null;
      }
      
      const responseText = await response.text();
      if (!responseText) {
        setError('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        return null;
      }
      
      const data = JSON.parse(responseText);
      
      if (!data || !data.id) {
        setError('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        console.error('Invalid data structure:', data);
        return null;
      }
      
      const mappedLeads = (data.leads || []).map(mapLeadData);
      
      console.log(`Loaded ${mappedLeads.length} deals for ${data.name}`);
      console.log('–°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫:', mappedLeads.map(d => ({ id: d.id, status: d.status_name })));
      console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫:', mappedLeads);
      
      const paymentNotifications = checkPaymentDeadlines(mappedLeads);
      
      return {
        clientData: {
          id: String(data.id || ''),
          name: data.name || '–ö–ª–∏–µ–Ω—Ç',
          first_name: data.first_name || '',
          last_name: data.last_name || '',
          middle_name: data.middle_name || '',
          gender: data.gender || 'male',
          phone: data.phone || cleanPhone,
          email: data.email || ''
        },
        deals: mappedLeads,
        notifications: paymentNotifications
      };
      
    } catch (err) {
      console.error('AmoCRM sync error:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AmoCRM');
      return null;
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    error,
    fetchAmoCRMData,
    checkPaymentDeadlines
  };
};