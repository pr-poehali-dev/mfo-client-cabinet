import { useState, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';
import Header from '@/components/dashboard/Header';
import ProfileTab from '@/components/dashboard/ProfileTab';
import DealsTab from '@/components/dashboard/DealsTab';
import LoginPage from '@/components/auth/LoginPage';
import { Loan, Payment, Notification, Deal, Document } from '@/components/dashboard/types';
import DocumentsTab from '@/components/dashboard/DocumentsTab';

const Index = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userPhone, setUserPhone] = useState('');
  const [activeTab, setActiveTab] = useState('applications');
  const [loans, setLoans] = useState<Loan[]>([]);
  const [payments, setPayments] = useState<Payment[]>([]);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [deals, setDeals] = useState<Deal[]>([]);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [clientName, setClientName] = useState('');
  const [clientFirstName, setClientFirstName] = useState('');
  const [clientLastName, setClientLastName] = useState('');
  const [clientMiddleName, setClientMiddleName] = useState('');
  const [clientGender, setClientGender] = useState<'male' | 'female'>('male');
  const [clientPhone, setClientPhone] = useState('');
  const [clientEmail, setClientEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);

  const fetchAmoCRMData = async (phone: string) => {
    try {
      setLoading(true);
      setError('');
      
      const cleanPhone = phone.replace(/\D/g, '');
      
      const response = await fetch(
        `https://functions.poehali.dev/0c680166-1e97-4c5e-8c8f-5f2cd1c88850?phone=${cleanPhone}`
      );
      
      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch {
          setError('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
          setLoans([]);
          setPayments([]);
          setDeals([]);
          setNotifications([]);
          return;
        }
        
        if (response.status === 401) {
          setError('‚ö†Ô∏è –¢–æ–∫–µ–Ω AmoCRM —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç ACCESS_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞');
        } else if (response.status === 500 && errorData.message?.includes('credentials')) {
          setError('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ AmoCRM: –¥–æ–±–∞–≤—å—Ç–µ AMOCRM_DOMAIN –∏ ACCESS_TOKEN –≤ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞');
        } else if (response.status === 404) {
          setError('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AmoCRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ');
        } else {
          setError(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ AmoCRM');
        }
        setLoans([]);
        setPayments([]);
        setDeals([]);
        setNotifications([]);
        return;
      }
      
      const responseText = await response.text();
      if (!responseText) {
        setError('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        setLoans([]);
        setPayments([]);
        setDeals([]);
        setNotifications([]);
        return;
      }
      
      console.log('Response from server:', responseText);
      const data = JSON.parse(responseText);
      console.log('Parsed data:', data);
      
      setClientName(data.name || '–ö–ª–∏–µ–Ω—Ç');
      setClientFirstName(data.first_name || '');
      setClientLastName(data.last_name || '');
      setClientMiddleName(data.middle_name || '');
      setClientGender(data.gender || 'male');
      setClientPhone(data.phone || cleanPhone);
      setClientEmail(data.email || '');
      
      const mappedLeads = (data.leads || []).map((lead: any) => ({
        id: lead.id,
        name: lead.name || '–ó–∞—è–≤–∫–∞',
        status: lead.status_id === 142 ? 'approved' : 
               lead.status_id === 143 ? 'rejected' : 'pending',
        statusLabel: lead.status_id === 142 ? '–û–¥–æ–±—Ä–µ–Ω–∞' : 
                    lead.status_id === 143 ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        amount: lead.price || 0,
        term: 30,
        date: lead.created_at ? new Date(lead.created_at * 1000).toLocaleDateString('ru-RU') : new Date().toLocaleDateString('ru-RU'),
        description: lead.name || '–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–π–º'
      }));
      
      setDeals(mappedLeads);
      setLoans(mappedLeads);
      setPayments([]);
      setDocuments([]);
      setNotifications([]);
      setLastUpdate(new Date());
      
    } catch (err) {
      console.error('AmoCRM sync error:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AmoCRM');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const savedPhone = localStorage.getItem('userPhone');
    const isNewRegistration = localStorage.getItem('newRegistration');
    
    if (savedPhone) {
      setUserPhone(savedPhone);
      setIsAuthenticated(true);
      fetchAmoCRMData(savedPhone);
      
      if (isNewRegistration === 'true') {
        setNotifications([{
          id: 'welcome-' + Date.now(),
          title: 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          message: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          date: new Date().toLocaleDateString('ru-RU'),
          read: false,
          type: 'success'
        }]);
        localStorage.removeItem('newRegistration');
      }
      
      const intervalId = setInterval(() => {
        fetchAmoCRMData(savedPhone);
      }, 15 * 1000);
      
      return () => clearInterval(intervalId);
    }
  }, []);

  const handleLogin = (phone: string) => {
    setUserPhone(phone);
    setIsAuthenticated(true);
    localStorage.setItem('userPhone', phone);
    fetchAmoCRMData(phone);
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setUserPhone('');
    localStorage.removeItem('userPhone');
    
    setLoans([]);
    setPayments([]);
    setNotifications([]);
    setDeals([]);
    setDocuments([]);
    setClientName('');
    setClientFirstName('');
    setClientLastName('');
    setClientMiddleName('');
    setClientGender('male');
    setClientPhone('');
    setClientEmail('');
    setError('');
    setLastUpdate(null);
  };

  const refreshData = async () => {
    if (!userPhone) return;
    
    setLoading(true);
    setError('');
    
    try {
      const cleanPhone = userPhone.replace(/\D/g, '');
      
      const response = await fetch(
        `https://functions.poehali.dev/0c680166-1e97-4c5e-8c8f-5f2cd1c88850?phone=${cleanPhone}`
      );
      
      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch {
          setError('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
          return;
        }
        
        if (response.status === 401) {
          setError('‚ö†Ô∏è –¢–æ–∫–µ–Ω AmoCRM —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç ACCESS_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞');
        } else if (response.status === 500 && errorData.message?.includes('credentials')) {
          setError('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ AmoCRM: –¥–æ–±–∞–≤—å—Ç–µ AMOCRM_DOMAIN –∏ ACCESS_TOKEN –≤ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞');
        } else if (response.status === 404) {
          setError('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AmoCRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ');
        } else {
          setError(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ AmoCRM');
        }
        return;
      }
      
      const responseText = await response.text();
      if (!responseText) {
        setError('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        return;
      }
      
      const data = JSON.parse(responseText);
      
      setClientName(data.name || '–ö–ª–∏–µ–Ω—Ç');
      setClientFirstName(data.first_name || '');
      setClientLastName(data.last_name || '');
      setClientMiddleName(data.middle_name || '');
      setClientGender(data.gender || 'male');
      setClientPhone(data.phone || cleanPhone);
      setClientEmail(data.email || '');
      
      const mappedLeads = (data.leads || []).map((lead: any) => ({
        id: lead.id,
        name: lead.name || '–ó–∞—è–≤–∫–∞',
        status: lead.status_id === 142 ? 'approved' : 
               lead.status_id === 143 ? 'rejected' : 'pending',
        statusLabel: lead.status_id === 142 ? '–û–¥–æ–±—Ä–µ–Ω–∞' : 
                    lead.status_id === 143 ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        amount: lead.price || 0,
        term: 30,
        date: lead.created_at ? new Date(lead.created_at * 1000).toLocaleDateString('ru-RU') : new Date().toLocaleDateString('ru-RU'),
        description: lead.name || '–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–π–º'
      }));
      
      setDeals(mappedLeads);
      setLoans(mappedLeads);
      setPayments([]);
      setDocuments([]);
      setNotifications([{
        id: Date.now().toString(),
        title: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${mappedLeads.length}`,
        date: new Date().toLocaleDateString('ru-RU'),
        read: false,
        type: 'success'
      }]);
      setLastUpdate(new Date());
      
    } catch (err) {
      console.error('Refresh error:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setLoading(false);
    }
  };

  if (!isAuthenticated) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#1a1a2e] via-[#16213e] to-[#0f1419]">
      <Header 
        lastUpdate={lastUpdate}
        loading={loading}
        onRefresh={refreshData}
        onLogout={handleLogout}
      />

      <div className="container mx-auto px-4 py-8">
        {error && (
          <div className="mb-6 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg flex items-center gap-3">
            <Icon name="AlertCircle" size={20} className="text-yellow-500" />
            <p className="text-sm text-yellow-200">{error}</p>
          </div>
        )}
        
        {loading && (
          <div className="mb-6 p-4 bg-secondary/10 border border-secondary/30 rounded-lg flex items-center gap-3">
            <div className="animate-spin">
              <Icon name="Loader2" size={20} className="text-secondary" />
            </div>
            <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ AmoCRM...</p>
          </div>
        )}
        
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-8 bg-card/50 backdrop-blur-sm p-1 h-auto rounded-xl">
            <TabsTrigger value="applications" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-secondary py-3 rounded-lg">
              <Icon name="FileText" size={18} />
              <span className="hidden sm:inline">–ó–∞—è–≤–∫–∏</span>
            </TabsTrigger>
            <TabsTrigger value="documents" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-secondary py-3 rounded-lg">
              <Icon name="FolderOpen" size={18} />
              <span className="hidden sm:inline">–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
            </TabsTrigger>
            <TabsTrigger value="profile" className="flex items-center gap-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-primary data-[state=active]:to-secondary py-3 rounded-lg">
              <Icon name="User" size={18} />
              <span className="hidden sm:inline">–ü—Ä–æ—Ñ–∏–ª—å</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="applications">
            <DealsTab 
              deals={deals} 
              clientPhone={clientPhone}
              onApplicationSubmit={() => fetchAmoCRMData(userPhone)}
            />
          </TabsContent>

          <TabsContent value="documents">
            <DocumentsTab 
              documents={documents} 
              clientName={clientName}
              clientPhone={clientPhone}
            />
          </TabsContent>

          <TabsContent value="profile">
            <ProfileTab 
              clientName={clientName}
              clientFirstName={clientFirstName}
              clientLastName={clientLastName}
              clientMiddleName={clientMiddleName}
              clientGender={clientGender}
              clientPhone={clientPhone}
              clientEmail={clientEmail}
            />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Index;